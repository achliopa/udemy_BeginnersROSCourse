;; Auto-generated. Do not edit!


(when (boundp 'my_robot2_msgs::CountUntilGoal)
  (if (not (find-package "MY_ROBOT2_MSGS"))
    (make-package "MY_ROBOT2_MSGS"))
  (shadow 'CountUntilGoal (find-package "MY_ROBOT2_MSGS")))
(unless (find-package "MY_ROBOT2_MSGS::COUNTUNTILGOAL")
  (make-package "MY_ROBOT2_MSGS::COUNTUNTILGOAL"))

(in-package "ROS")
;;//! \htmlinclude CountUntilGoal.msg.html


(defclass my_robot2_msgs::CountUntilGoal
  :super ros::object
  :slots (_max_number _wait_duration ))

(defmethod my_robot2_msgs::CountUntilGoal
  (:init
   (&key
    ((:max_number __max_number) 0)
    ((:wait_duration __wait_duration) 0)
    )
   (send-super :init)
   (setq _max_number (round __max_number))
   (setq _wait_duration (round __wait_duration))
   self)
  (:max_number
   (&optional __max_number)
   (if __max_number (setq _max_number __max_number)) _max_number)
  (:wait_duration
   (&optional __wait_duration)
   (if __wait_duration (setq _wait_duration __wait_duration)) _wait_duration)
  (:serialization-length
   ()
   (+
    ;; int64 _max_number
    8
    ;; int64 _wait_duration
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int64 _max_number
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _max_number (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _max_number) (= (length (_max_number . bv)) 2)) ;; bignum
              (write-long (ash (elt (_max_number . bv) 0) 0) s)
              (write-long (ash (elt (_max_number . bv) 1) -1) s))
             ((and (class _max_number) (= (length (_max_number . bv)) 1)) ;; big1
              (write-long (elt (_max_number . bv) 0) s)
              (write-long (if (>= _max_number 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _max_number s)(write-long (if (>= _max_number 0) 0 #xffffffff) s)))
     ;; int64 _wait_duration
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _wait_duration (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _wait_duration) (= (length (_wait_duration . bv)) 2)) ;; bignum
              (write-long (ash (elt (_wait_duration . bv) 0) 0) s)
              (write-long (ash (elt (_wait_duration . bv) 1) -1) s))
             ((and (class _wait_duration) (= (length (_wait_duration . bv)) 1)) ;; big1
              (write-long (elt (_wait_duration . bv) 0) s)
              (write-long (if (>= _wait_duration 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _wait_duration s)(write-long (if (>= _wait_duration 0) 0 #xffffffff) s)))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int64 _max_number
#+(or :alpha :irix6 :x86_64)
      (setf _max_number (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _max_number (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;; int64 _wait_duration
#+(or :alpha :irix6 :x86_64)
      (setf _wait_duration (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _wait_duration (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;;
   self)
  )

(setf (get my_robot2_msgs::CountUntilGoal :md5sum-) "a11069a8ae722f3b72ff1b5673c30ffc")
(setf (get my_robot2_msgs::CountUntilGoal :datatype-) "my_robot2_msgs/CountUntilGoal")
(setf (get my_robot2_msgs::CountUntilGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal
int64 max_number
int64 wait_duration

")



(provide :my_robot2_msgs/CountUntilGoal "a11069a8ae722f3b72ff1b5673c30ffc")


